from app.services.login import decode_access_token
import pytest
from fastapi.testclient import TestClient
from sqlalchemy import text
from app.main import app
from app.db.session import SessionLocal
from app.services.login import create_access_token 
from datetime import timedelta


def test_register_verify_login(client):
    clean_db()

    request_data = {
        "name": "Juan",
        "last_name": "Pérez",
        "email": "juan.perez@example.com",
        "password": "password123",
        "provider": "local"
    }

    response = client.post("/register", json=request_data)
    assert response.status_code == 200
    response_data = response.json()
    assert response_data["status"] == "success"
    assert response_data["message"] == "Usuario registrado correctamente"

    request_data = {
        "email": "juan.perez@example.com",
        "code": "123456"
    }

    response = client.post("/send-verification", json=request_data)
    assert response.status_code == 200
    response_data = response.json()
    assert response_data["status"] == "success"
    assert response_data["message"] == "Código de verificación enviado"
    assert response_data["email"] == "juan.perez@example.com"

    response = client.post("/verify-code", json=request_data)
    assert response.status_code == 200
    response_data = response.json()
    assert response_data["status"] == "success"
    assert response_data["message"] == "Código de verificación correcto"

    request_data = {
        "email": "juan.perez@example.com",
        "password": "password123"
    }

    response = client.post("/login", json=request_data)
    assert response.status_code == 200
    response_data = response.json()
    assert "access_token" in response_data
    assert response_data["token_type"] == "bearer"

    access_token = response_data["access_token"]
    response = client.get("/validate-token", headers={"Authorization": f"Bearer {access_token}"})

    assert response.status_code == 200
    response_data = response.json()
    assert response_data["status"] == "success"
    assert response_data["message"] == "Token válido"
    assert response_data["data"]["sub"] == "juan.perez@example.com"


@pytest.fixture()
def client():
    with TestClient(app) as client:
        yield client


def clean_db():
    db = SessionLocal()
    try:
        db.execute(text("TRUNCATE TABLE codigos, usuario RESTART IDENTITY CASCADE"))
        db.commit()
    finally:
        db.close()


def register_google_user():
    db = SessionLocal()
    try:
        result = db.execute(text("SELECT correo FROM usuario WHERE correo = 'google.user@example.com'"))
        if result.fetchone() is None:
            db.execute(
                text("INSERT INTO usuario (correo, nombre, apellido, proveedor) VALUES ('google.user@example.com', 'Google User', 'google', 'google')")
            )
            db.commit()
    finally:
        db.close()


def test_login_google(client):
    register_google_user()

    request_data = {
        "email": "google.user@example.com",
        "name": "Google User"
    }

    response = client.post("/login-google", json=request_data)

    assert response.status_code == 200
    response_data = response.json()
    assert response_data["status"] == "success"
    assert "access_token" in response_data
    assert response_data["token_type"] == "bearer"


def test_forgot_password(client):
    register_google_user()

    request_data = {
        "email": "google.user@example.com"
    }

    response = client.post("/forgot-password", json=request_data)
    assert response.status_code == 200
    response_data = response.json()
    assert response_data["status"] == "success"
    assert response_data["message"] == "Enlace de restablecimiento enviado"
    assert response_data["email"] == "google.user@example.com"


def create_reset_token(email: str, expires_delta: timedelta = timedelta(hours=1)):
    return create_access_token({"sub": email}, expires_delta)


def test_reset_password(client):
    register_google_user()

    request_data = {
        "email": "google.user@example.com"
    }
    response = client.post("/forgot-password", json=request_data)

    assert response.status_code == 200
    response_data = response.json()
    assert response_data["status"] == "success"
    assert response_data["message"] == "Enlace de restablecimiento enviado"

    reset_token = create_reset_token("google.user@example.com")

    request_data = {
        "token": reset_token,
        "new_password": "newpassword123"
    }
    response = client.post("/reset-password", json=request_data)

    assert response.status_code == 200
    response_data = response.json()
    assert response_data["status"] == "success"
    assert response_data["message"] == "Contraseña cambiada correctamente"
